<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE sqlMap      
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"      
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">

<sqlMap namespace="MyPageCourse">

	<typeAlias alias="Course" type="pro.course.vo.Course"/>
	<typeAlias alias="Video" type="pro.video.vo.Video"/>
	<typeAlias alias="Enrollment" type="pro.enrollment.vo.Enrollment"/>
	<typeAlias alias="Criteria" type="pro.criteria.vo.Criteria"/>

	<select id="getTotalFinishedCourseByMap" parameterClass="java.util.Map" resultClass="java.lang.Integer">
		select count(*)
		from course_video A, progress B
		where A.course_video_no = B.course_video_no
		and B.student_no = #param1#
		and A.course_no = #param2#
		and B.progress_complete = 100
	</select>

	<select id="getTotalCourseVideoByCourseNo" parameterClass="int" resultClass="int">
		select nvl(B.cn, 0)
		from course A, (select course_no, count(*) cn
						from course_video
						group by course_no
						having course_no = 1) B
		where A.course_no = B.course_no(+)
		and A.course_no = #value#
	</select>
	
	<select id="getTotalStudentByCourseNo" parameterClass="int" resultClass="int">
		select
			nvl(A.cn, 0)
		from (select course_no, count(*) cn
			from enrollment
			group by course_no) A, course B
		where B.course_no = A.course_no (+)
		and B.course_no = #value#		
	</select>
	
	<select id="getStudentsByCourseNo" parameterClass="Criteria" resultClass="Enrollment">
		select 
			B.student_no				"student.no"
			,B.student_name				"student.name"
			,B.student_email			"student.email"
			,A.course_no				"course.no"
			,C.course_name				"course.name"
			,A.enrollment_start_date	startDate
		from (select row_number() over(order by enrollment_start_date desc) rn, enrollment_start_date, course_no, student_no
			from enrollment
			where course_no = #courseNo#) A, student B, course C
		where A.student_no = B.student_no
		and A.course_no = C.course_no
		<dynamic>
			<isNotNull property="keyword">
				and B.student_name like '%' || #keyword# || '%'
			</isNotNull>		
		</dynamic>
		<![CDATA[
			and rn >= #beginIndex#
			and rn <= #endIndex#
		]]>
	</select>
	
	<select id="getCourseByCourseNo" parameterClass="int" resultClass="Course">
		select
			A.course_no			no
			,A.course_name		name
			,A.course_summary	summary
			,B.dept_no			"dept.no"
			,B.dept_name		"dept.name"
			,C.lecturer_no		"lecturer.no"
			,C.lecturer_name	"lecturer.name"
		from course A, dept B, lecturer C
		where A.dept_no = B.dept_no
		and A.lecturer_no = C.lecturer_no
		and A.course_no = #value#
	</select>
	
	<select id="getVideoByVideoNo" parameterClass="int" resultClass="Video">
		select 	
			course_video_no				no
			,course_video_link			link
			,course_video_title			title
			,course_video_description		description
			,course_video_attached		attached
			,course_video_permit			permit
			,course_video_order			"order"
			,course_no					"course.no"
		from course_video
		where course_video_no = #value#
	</select>
	
	<select id="getCourseInfo" parameterClass="Criteria" resultClass="Course">
		select
			A.course_no				no
			,A.course_name			name
			,A.course_summary		summary
			,A.course_detail		detail
			,A.course_point			point
			,A.dept_no				"dept.no"
			,A.dept_name			"dept.name"
			,A.course_permit		permit
			,A.lecturer_no			"lecturer.no"
			,A.lecturer_name		"lecturer.name"
		from (select row_number() over(order by C.course_no desc) rn, C.course_no, C.course_name, C.course_summary
					, C.course_detail, C.course_point, C.lecturer_no, D.dept_no, D.dept_name, C.course_permit
					, L.lecturer_name
			from course C, dept D, lecturer L
			where C.dept_no = D.dept_no
			and C.lecturer_no = L.lecturer_no
			<dynamic>
				<isNotNull property="opt">
					<isNotNull property="keyword">
						<isEqual property="opt" compareValue="course">
							and C.course_name like '%' || #keyword# || '%'
						</isEqual>
						<isEqual property="opt" compareValue="lecturer">
							and L.lecturer_name like '%' || #keyword# || '%'
						</isEqual>
						<isEqual property="opt" compareValue="dept">
							and D.dept_name like '%' || #keyword# || '%'
						</isEqual>
					</isNotNull>
				</isNotNull>
				<isNotNull property="noAnswer">
					<isEqual property="noAnswer" compareValue="Y">
						and C.course_permit = 'N'	
					</isEqual>
					<isEqual property="noAnswer" compareValue="N">
						and C.course_permit = 'Y'	
					</isEqual>
				</isNotNull>
			</dynamic>
			) A
		<![CDATA[
			where A.rn >= #beginIndex#
			and A.rn <= #endIndex#
		]]>
	</select>
	
	<select id="getTotalCourses" parameterClass="Criteria" resultClass="int">
		select count(*)
		from course
		where course_name is not null
		<dynamic>
			<isNotNull property="opt">
				<isNotNull property="keyword">
					<isEqual property="opt" compareValue="course">
						and C.course_name like '%' || #keyword# || '%'
					</isEqual>
					<isEqual property="opt" compareValue="lecturer">
						and L.lecturer_name like '%' || #keyword# || '%'
					</isEqual>
					<isEqual property="opt" compareValue="dept">
						and D.dept_name like '%' || #keyword# || '%'
					</isEqual>
				</isNotNull>
			</isNotNull>		
		</dynamic>
	</select>
	
	<select id="getVideoInfo" parameterClass="Criteria" resultClass="Video">
		select 	
				A.course_video_no				no
				,A.course_video_link			link
				,A.course_video_title			title
				,A.course_video_description		description
				,A.course_video_attached		attached
				,A.course_video_permit			permit
				,A.course_video_order			"order"
				,A.course_no					"course.no"
				,B.course_name					"course.name"
		from (select row_number() over(order by course_video_no desc) rn ,course_video_no ,course_video_link 
					,course_video_title ,course_video_description ,course_video_attached
					,course_video_permit ,course_video_order ,course_no
			from course_video
			where course_video_link is not null
			<dynamic>
				<isNotNull property="courseNo">
					and course_no = #courseNo#
				</isNotNull>
				<isNotNull property="noAnswer">
					<isEqual property="noAnswer" compareValue="Y">
						and course_video_permit = 'N'
					</isEqual>
					<isEqual property="noAnswer" compareValue="N">
						and course_video_permit = 'Y'
					</isEqual>
				</isNotNull>
			</dynamic>
			) A, course B
		where A.course_no = B.course_no
		<![CDATA[
			and A.rn >= #beginIndex#
			and A.rn <= #endIndex#
		]]>		
	</select>
	
	<select id="getGradeAvgByCourseNo" parameterClass="int" resultClass="double">
		select
			nvl(A.avg_grade, 0)
			,B.course_no
		from (select course_no, round(avg(postscription_grade), 1) avg_grade
			from postscription
			group by course_no) A, course B
		where B.course_no = A.course_no (+)
		and B.course_no = #value#
	</select>
	
	<update id="updateCourseInfo" parameterClass="Course">
		update course
		set
			course_name = #name#
			,course_summary = #summary#
			,course_detail = #detail#
			,course_point = #point#
			,course_permit = #permit#
		where course_no = #no#
	</update>
	
	<update id="updateVideoInfo" parameterClass="Video">
		update course_video
		set
			course_video_link = #link#
			,course_video_title = #title#
			,course_video_description = #description#
			,course_video_attached = #attached#
			,course_video_permit = #permit#
			,course_video_order = #order#
		where course_video_no = #no#
	</update>

</sqlMap>