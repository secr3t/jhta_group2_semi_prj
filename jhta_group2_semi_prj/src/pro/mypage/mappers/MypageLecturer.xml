<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE sqlMap      
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"      
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">

<sqlMap namespace="MyPageLecturer">

	<typeAlias alias="Lecturer" type="pro.lecturer.vo.Lecturer"/>
	<typeAlias alias="Course" type="pro.course.vo.Course"/>
	<typeAlias alias="Qna" type="pro.qna.vo.Qna"/>
	<typeAlias alias="Criteria" type="pro.criteria.vo.Criteria"/>
	<typeAlias alias="Video" type="pro.video.vo.Video"/>
	
	<insert id="addCourseVideo" parameterClass="Video">
		insert into course_video (course_video_no, course_video_link, course_video_title, course_video_description, course_video_attached, course_video_order, course_no) 
		values (course_video_no_seq.nextval, #link#, #title#, #description#, #attached#, #order#, #course.no#)
	</insert>
	
	<insert id="addCourse" parameterClass="Course">
		insert into course (course_no, course_name, course_summary, course_detail, course_point, lecturer_no, dept_no)
		values (course_no_seq.nextval, #name#, #summary#, #detail#, #point#, #lecturer.no#, #dept.no#)
	</insert>
	
	<select id="getLecturerInfo" parameterClass="Criteria" resultClass="Lecturer">
		select
			A.lecturer_no			no
			,A.lecturer_name		name
			,A.lecturer_email		email
			,A.lecturer_pwd			pwd
			,A.lecturer_phone		phone
			,A.lecturer_career		career
			,A.lecturer_picture		picture
			,A.lecturer_permit		permit		
		from (select row_number() over(order by lecturer_no desc) rn, lecturer_no ,lecturer_name 
					,lecturer_email ,lecturer_pwd ,lecturer_phone ,lecturer_career ,lecturer_picture 
					,lecturer_permit, user_type		
			from lecturer
			where user_type = 'T'
			<dynamic>
				<isNotNull property="opt">
					<isNotNull property="keyword">
						<isEqual property="opt" compareValue="id">
							and lecturer_email like '%' || #keyword# || '%'				
						</isEqual>
						<isEqual property="opt" compareValue="name">
							and lecturer_name like '%' || #keyword# || '%'
						</isEqual>
					</isNotNull>
				</isNotNull>
				<isNotNull property="noAnswer">
					<isEqual property="noAnswer" compareValue="Y">
						and lecturer_permit = 'N'
					</isEqual>		
					<isEqual property="noAnswer" compareValue="N">
						and lecturer_permit = 'Y'
					</isEqual>
				</isNotNull>
			</dynamic>
			) A
		<![CDATA[
			where A.rn >= #beginIndex#
			and A.rn <= #endIndex#
		]]>
	</select>
	
	<select id="getTotalLecturers" parameterClass="Criteria" resultClass="int">
		select count(*)
		from lecturer
		where user_type = 'T'
		<dynamic>
			<isNotNull property="opt">
				<isNotNull property="keyword">
					<isEqual property="opt" compareValue="id">
						and lecturer_email like '%' || #keyword# || '%'
					</isEqual>
					<isEqual property="opt" compareValue="name">
						and lecturer_name like '%' || #keyword# || '%'
					</isEqual>
				</isNotNull>		
			</isNotNull>
		</dynamic>
	</select>

	<select id="getLecturerByNo" parameterClass="int" resultClass="Lecturer">
		select
			lecturer_no			no
			,lecturer_name		name
			,lecturer_email		email
			,lecturer_pwd		pwd
			,lecturer_phone		phone
			,lecturer_career	career
			,lecturer_picture	picture
			,lecturer_permit	permit
			,user_type			type	
		from lecturer
		where lecturer_no = #value#
	</select>
	
	<select id="getLecturerByEmail" parameterClass="string" resultClass="Lecturer">
		select
			lecturer_no			no
			,lecturer_name		name
			,lecturer_email		email
			,lecturer_pwd		pwd
			,lecturer_phone		phone
			,lecturer_career	career
			,lecturer_picture	picture
			,lecturer_permit	permit
			,user_type			type	
		from lecturer
		where lecturer_email = #value#
	</select>
	
	<select id="getTotalCourseRows" parameterClass="int" resultClass="int">
		select count(*)
		from course
		where lecturer_no = #value#
	</select>
	
	<select id="getCourseByLecturerNo" parameterClass="Criteria" resultClass="Course">
		select
			A.course_no			no
			,A.course_name		name
			,A.course_summary		summary
			,A.course_detail		detail
			,A.course_point		point
			,A.dept_no			"dept.no"
			,B.dept_name		"dept.name"
		from (select row_number() over(order by course_no desc) rn, course_no ,course_name
					,course_summary ,course_detail ,course_point ,dept_no, lecturer_no
			from course) A, dept B 
		where A.dept_no = B.dept_no
		and A.lecturer_no = #lecturerNo#
		<![CDATA[
			and A.rn >= #beginIndex#
			and A.rn <= #endIndex#
		]]>
	</select>
	
	<select id="getTotalQnaRows" parameterClass="Criteria" resultClass="int">
		select count(*)
		from (select
					A.qna_no 				no
					,A.qna_title			title
					,A.course_no			"course.no"
					,B.course_name			"course.name"
					,A.qna_ques_content 	quesContent
					,A.qna_ques_date		quesDate
					,A.qna_ans_content		ansContent
					,A.qna_ans_regdate		ansRegdate
					,C.student_no			"student.no"
					,C.student_name			"student.name"
			from(select row_number() over(order by qna_no desc) rn, qna_no, qna_title, course_no, 
						qna_ques_content, qna_ques_date, qna_ans_content, qna_ans_regdate, student_no, qna_active
				from qna
				where qna_active = 'Y'
				and course_no in (select course_no
								from course
								where lecturer_no = #lecturerNo#)) A, course B, student C
				where A.course_no = B.course_no
				and A.student_no = C.student_no
				<dynamic>
					<isNotNull property="opt">
						<isNotNull property ="keyword">
							<isEqual property="opt" compareValue="title">
								and A.qna_title like '%' || #keyword# || '%'
							</isEqual>
							<isEqual property="opt" compareValue="course">
								and B.course_name like '%' || #keyword# || '%'					
							</isEqual>
							<isEqual property="opt" compareValue="student">
								and C.student_name like '%' || #keyword# || '%'
							</isEqual>
						</isNotNull>
					</isNotNull>
					<isNotNull property="noAnswer">
						<isEqual property="noAnswer" compareValue="N">
								and A.qna_ans_content is not null
						</isEqual>
						<isEqual property="noAnswer" compareValue="Y">
								and A.qna_ans_content is null
						</isEqual>
					</isNotNull>
				</dynamic>)
	</select>
	
	<select id="getQnaByLecturerNo" parameterClass="Criteria" resultClass="Qna">
		select
			A.qna_no 				no
			,A.qna_title			title
			,A.course_no			"course.no"
			,B.course_name			"course.name"
			,A.qna_ques_content 	quesContent
			,A.qna_ques_date		quesDate
			,A.qna_ans_content		ansContent
			,A.qna_ans_regdate		ansRegdate
			,C.student_no			"student.no"
			,C.student_name			"student.name"
		from(select row_number() over(order by qna_no desc) rn, qna_no, qna_title, course_no, 
							qna_ques_content, qna_ques_date, qna_ans_content, qna_ans_regdate, student_no, qna_active 
			from qna
			where qna_active = 'Y'
			and course_no in (select course_no
							from course
							where lecturer_no = #lecturerNo#)) A, course B, student C
		where A.course_no = B.course_no
		and A.student_no = C.student_no
		<dynamic>
			<isNotNull property="opt">
				<isNotNull property ="keyword">
					<isEqual property="opt" compareValue="title">
						and A.qna_title like '%' || #keyword# || '%'
					</isEqual>
					<isEqual property="opt" compareValue="course">
						and B.course_name like '%' || #keyword# || '%'					
					</isEqual>
					<isEqual property="opt" compareValue="student">
						and C.student_name like '%' || #keyword# || '%'
					</isEqual>
				</isNotNull>
			</isNotNull>
			<isNotNull property="noAnswer">
				<isEqual property="noAnswer" compareValue="N">
						and A.qna_ans_content is not null
				</isEqual>
				<isEqual property="noAnswer" compareValue="Y">
						and A.qna_ans_content is null
				</isEqual>
			</isNotNull>
		</dynamic>
		<![CDATA[
			and rn >= #beginIndex#
			and rn <= #endIndex#
		]]>
	</select>
	
	<update id="updateMyInfo" parameterClass="Lecturer">
		update lecturer
		set
			lecturer_pwd = #pwd#
			,lecturer_phone = #phone#
			,lecturer_career = #career#
			,lecturer_picture = #picture#
			,lecturer_permit = #permit#
		where lecturer_no = #no#
	</update>	
</sqlMap>